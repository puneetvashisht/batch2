{"version":3,"sources":["app/home/welcome.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA0B,eAAe,CAAC,CAAA;AAC1C,sBAMO,gBAAgB,CAAC,CAAA;AAQxB;IAQE,0BAAoB,WAAwB;QAC1C,gCAAgC;QAChC,gCAAgC;QAChC,kEAAkE;QAClE,qCAAqC;QACrC,6BAA6B;QAC7B,oKAAoK;QACpK,SAAS;QACT,QAAQ;QACR,0DAA0D;QAC1D,uCAAuC;QACvC,+BAA+B;QAC/B,sDAAsD;QACtD,OAAO;QACP,MAAM;QAdY,gBAAW,GAAX,WAAW,CAAa;QAL5C,YAAO,GAAG;YACR,MAAM;YACN,QAAQ;SACT,CAAC;QAkBA,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC;YAC9B,UAAU,EAAE,WAAW,CAAC,KAAK,CAAC;gBAC5B,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC,kBAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBACpE,OAAO,EAAE,CAAC,EAAE,EAAE;wBACZ,kBAAU,CAAC,QAAQ;wBACnB,kBAAU,CAAC,OAAO,CAAC,uIAAuI,CAAC;qBAC5J,CAAC;aACH,CAAC;YACF,UAAU,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;YACrC,QAAQ,EAAE,CAAC,MAAM,CAAC;YAClB,SAAS,EAAE,WAAW,CAAC,KAAK,CAAC;gBAC3B,CAAC,SAAS,EAAE,kBAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC;aAC7D,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CACjC,UAAC,IAAS,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAjB,CAAiB,CACjC,CAAC;IACJ,CAAC;IAED,qCAAU,GAAV;QACc,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAE,CAAC,IAAI,CAAC,IAAI,mBAAW,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC1H,CAAC;IAED,mCAAQ,GAAR;QACE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IAED,2CAAgB,GAAhB,UAAiB,OAAoB;QACnC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QACzB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,gDAAqB,GAArB,UAAsB,OAAoB;QACxC,IAAM,OAAO,GAAG,IAAI,OAAO,CACzB,UAAC,OAAO,EAAE,MAAM;YACd,UAAU,CAAC;gBACT,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;oBAChC,OAAO,CAAC,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC7B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC;YACH,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CACF,CAAC;QACF,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IA7EH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,SAAS;YACnB,WAAW,EAAE,0BAA0B;SACxC,CAAC;;wBAAA;IA2EF,uBAAC;AAAD,CA1EA,AA0EC,IAAA;AA1EY,wBAAgB,mBA0E5B,CAAA","file":"welcome.component.js","sourcesContent":["import { Component } from '@angular/core';\nimport {\n  FormGroup,\n  FormControl,\n  Validators,\n  FormBuilder,\n  FormArray\n} from \"@angular/forms\";\nimport { Observable } from \"rxjs/Rx\";\n\n@Component({\n  moduleId: module.id,\n  selector: 'welcome',\n  templateUrl: './welcome.component.html'\n})\nexport class WelcomeComponent {\n  myForm: FormGroup;\n\n  genders = [\n    'male',\n    'female'\n  ];\n\n  constructor(private formBuilder: FormBuilder) {\n    // this.myForm = new FormGroup({\n    //   'userData': new FormGroup({\n    //     'username': new FormControl('Puneet', Validators.required),\n    //     'email': new FormControl('', [\n    //       Validators.required,\n    //       Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\")\n    //     ])\n    //   }),\n    //   'password': new FormControl('', Validators.required),\n    //   'gender': new FormControl('male'),\n    //   'hobbies': new FormArray([\n    //     new FormControl('Cooking', Validators.required)\n    //   ])\n    // });\n\n    this.myForm = formBuilder.group({\n      'userData': formBuilder.group({\n        'username': ['Puneet', [Validators.required, this.exampleValidator]],\n        'email': ['', [\n          Validators.required,\n          Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\")\n        ]]\n      }),\n      'password': ['', Validators.required],\n      'gender': ['male'],\n      'hobbies': formBuilder.array([\n        ['Cooking', Validators.required, this.asyncExampleValidator]\n      ])\n    });\n\n    this.myForm.statusChanges.subscribe(\n      (data: any) => console.log(data)\n    );\n  }\n\n  onAddHobby() {\n    (<FormArray>this.myForm.controls['hobbies']).push(new FormControl('', Validators.required, this.asyncExampleValidator));\n  }\n\n  onSubmit() {\n    console.log(this.myForm);\n  }\n\n  exampleValidator(control: FormControl): {[s: string]: boolean} {\n    if (control.value === 'Example') {\n      return {example: true};\n    }\n    return null;\n  }\n\n  asyncExampleValidator(control: FormControl): Promise<any> | Observable<any> {\n    const promise = new Promise<any>(\n      (resolve, reject) => {\n        setTimeout(() => {\n          if (control.value === 'Example') {\n            resolve({'invalid': true});\n          } else {\n            resolve(null);\n          }\n        }, 1500);\n      }\n    );\n    return promise;\n  }\n\n}\n"]}